/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.aaa.bbb.Contract;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-09-30")
public class RelPlantWeb implements org.apache.thrift.TBase<RelPlantWeb, RelPlantWeb._Fields>, java.io.Serializable, Cloneable, Comparable<RelPlantWeb> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RelPlantWeb");

  private static final org.apache.thrift.protocol.TField PLANT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("plant_code", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PLANT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("plant_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField WEB_FIELD_DESC = new org.apache.thrift.protocol.TField("web", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RelPlantWebStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RelPlantWebTupleSchemeFactory();

  public java.lang.String plant_code; // required
  public java.lang.String plant_name; // optional
  public int web; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLANT_CODE((short)1, "plant_code"),
    PLANT_NAME((short)2, "plant_name"),
    WEB((short)3, "web");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLANT_CODE
          return PLANT_CODE;
        case 2: // PLANT_NAME
          return PLANT_NAME;
        case 3: // WEB
          return WEB;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WEB_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PLANT_NAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLANT_CODE, new org.apache.thrift.meta_data.FieldMetaData("plant_code", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLANT_NAME, new org.apache.thrift.meta_data.FieldMetaData("plant_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WEB, new org.apache.thrift.meta_data.FieldMetaData("web", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RelPlantWeb.class, metaDataMap);
  }

  public RelPlantWeb() {
  }

  public RelPlantWeb(
    java.lang.String plant_code,
    int web)
  {
    this();
    this.plant_code = plant_code;
    this.web = web;
    setWebIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RelPlantWeb(RelPlantWeb other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPlant_code()) {
      this.plant_code = other.plant_code;
    }
    if (other.isSetPlant_name()) {
      this.plant_name = other.plant_name;
    }
    this.web = other.web;
  }

  public RelPlantWeb deepCopy() {
    return new RelPlantWeb(this);
  }

  @Override
  public void clear() {
    this.plant_code = null;
    this.plant_name = null;
    setWebIsSet(false);
    this.web = 0;
  }

  public java.lang.String getPlant_code() {
    return this.plant_code;
  }

  public RelPlantWeb setPlant_code(java.lang.String plant_code) {
    this.plant_code = plant_code;
    return this;
  }

  public void unsetPlant_code() {
    this.plant_code = null;
  }

  /** Returns true if field plant_code is set (has been assigned a value) and false otherwise */
  public boolean isSetPlant_code() {
    return this.plant_code != null;
  }

  public void setPlant_codeIsSet(boolean value) {
    if (!value) {
      this.plant_code = null;
    }
  }

  public java.lang.String getPlant_name() {
    return this.plant_name;
  }

  public RelPlantWeb setPlant_name(java.lang.String plant_name) {
    this.plant_name = plant_name;
    return this;
  }

  public void unsetPlant_name() {
    this.plant_name = null;
  }

  /** Returns true if field plant_name is set (has been assigned a value) and false otherwise */
  public boolean isSetPlant_name() {
    return this.plant_name != null;
  }

  public void setPlant_nameIsSet(boolean value) {
    if (!value) {
      this.plant_name = null;
    }
  }

  public int getWeb() {
    return this.web;
  }

  public RelPlantWeb setWeb(int web) {
    this.web = web;
    setWebIsSet(true);
    return this;
  }

  public void unsetWeb() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WEB_ISSET_ID);
  }

  /** Returns true if field web is set (has been assigned a value) and false otherwise */
  public boolean isSetWeb() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WEB_ISSET_ID);
  }

  public void setWebIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WEB_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PLANT_CODE:
      if (value == null) {
        unsetPlant_code();
      } else {
        setPlant_code((java.lang.String)value);
      }
      break;

    case PLANT_NAME:
      if (value == null) {
        unsetPlant_name();
      } else {
        setPlant_name((java.lang.String)value);
      }
      break;

    case WEB:
      if (value == null) {
        unsetWeb();
      } else {
        setWeb((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PLANT_CODE:
      return getPlant_code();

    case PLANT_NAME:
      return getPlant_name();

    case WEB:
      return getWeb();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PLANT_CODE:
      return isSetPlant_code();
    case PLANT_NAME:
      return isSetPlant_name();
    case WEB:
      return isSetWeb();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RelPlantWeb)
      return this.equals((RelPlantWeb)that);
    return false;
  }

  public boolean equals(RelPlantWeb that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_plant_code = true && this.isSetPlant_code();
    boolean that_present_plant_code = true && that.isSetPlant_code();
    if (this_present_plant_code || that_present_plant_code) {
      if (!(this_present_plant_code && that_present_plant_code))
        return false;
      if (!this.plant_code.equals(that.plant_code))
        return false;
    }

    boolean this_present_plant_name = true && this.isSetPlant_name();
    boolean that_present_plant_name = true && that.isSetPlant_name();
    if (this_present_plant_name || that_present_plant_name) {
      if (!(this_present_plant_name && that_present_plant_name))
        return false;
      if (!this.plant_name.equals(that.plant_name))
        return false;
    }

    boolean this_present_web = true;
    boolean that_present_web = true;
    if (this_present_web || that_present_web) {
      if (!(this_present_web && that_present_web))
        return false;
      if (this.web != that.web)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPlant_code()) ? 131071 : 524287);
    if (isSetPlant_code())
      hashCode = hashCode * 8191 + plant_code.hashCode();

    hashCode = hashCode * 8191 + ((isSetPlant_name()) ? 131071 : 524287);
    if (isSetPlant_name())
      hashCode = hashCode * 8191 + plant_name.hashCode();

    hashCode = hashCode * 8191 + web;

    return hashCode;
  }

  @Override
  public int compareTo(RelPlantWeb other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPlant_code()).compareTo(other.isSetPlant_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlant_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plant_code, other.plant_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPlant_name()).compareTo(other.isSetPlant_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlant_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plant_name, other.plant_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWeb()).compareTo(other.isSetWeb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.web, other.web);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RelPlantWeb(");
    boolean first = true;

    sb.append("plant_code:");
    if (this.plant_code == null) {
      sb.append("null");
    } else {
      sb.append(this.plant_code);
    }
    first = false;
    if (isSetPlant_name()) {
      if (!first) sb.append(", ");
      sb.append("plant_name:");
      if (this.plant_name == null) {
        sb.append("null");
      } else {
        sb.append(this.plant_name);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("web:");
    sb.append(this.web);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (plant_code == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'plant_code' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'web' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RelPlantWebStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RelPlantWebStandardScheme getScheme() {
      return new RelPlantWebStandardScheme();
    }
  }

  private static class RelPlantWebStandardScheme extends org.apache.thrift.scheme.StandardScheme<RelPlantWeb> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RelPlantWeb struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLANT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.plant_code = iprot.readString();
              struct.setPlant_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLANT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.plant_name = iprot.readString();
              struct.setPlant_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WEB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.web = iprot.readI32();
              struct.setWebIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetWeb()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'web' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RelPlantWeb struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.plant_code != null) {
        oprot.writeFieldBegin(PLANT_CODE_FIELD_DESC);
        oprot.writeString(struct.plant_code);
        oprot.writeFieldEnd();
      }
      if (struct.plant_name != null) {
        if (struct.isSetPlant_name()) {
          oprot.writeFieldBegin(PLANT_NAME_FIELD_DESC);
          oprot.writeString(struct.plant_name);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(WEB_FIELD_DESC);
      oprot.writeI32(struct.web);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RelPlantWebTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RelPlantWebTupleScheme getScheme() {
      return new RelPlantWebTupleScheme();
    }
  }

  private static class RelPlantWebTupleScheme extends org.apache.thrift.scheme.TupleScheme<RelPlantWeb> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RelPlantWeb struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.plant_code);
      oprot.writeI32(struct.web);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPlant_name()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetPlant_name()) {
        oprot.writeString(struct.plant_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RelPlantWeb struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.plant_code = iprot.readString();
      struct.setPlant_codeIsSet(true);
      struct.web = iprot.readI32();
      struct.setWebIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.plant_name = iprot.readString();
        struct.setPlant_nameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

